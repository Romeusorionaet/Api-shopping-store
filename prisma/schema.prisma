generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ModeOfSale {
  SELLS_ONLY_IN_THE_REGION
  ONLINE_STORE
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  PAYMENT_CONFIRMED
}

model Category {
  id        String    @id @default(uuid())
  title     String    @unique
  slug      String
  imgUrl    String
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")
  createdAt DateTime  @default(now()) @map("created_at")

  products Product[]

  @@map("categories")
}

model Product {
  id                   String     @id @default(uuid())
  categoryTitle        String     @map("category_title")
  title                String     @unique
  slug                 String
  description          String     @db.Text
  imgUrlList           String[]   @map("img_url_list")
  corsList             String[]   @map("color_list")
  price                Int
  stockQuantity        Int        @map("stock_quantity")
  minimumQuantityStock Int        @map("minimum_quantity_stock")
  discountPercentage   Int        @map("discount_percentage")
  width                Int
  height               Int
  weight               Int
  placeOfSale          ModeOfSale @default(ONLINE_STORE)
  stars                Int?       @default(0)
  updatedAt            DateTime?  @default(now()) @updatedAt @map("updated_at")
  createdAt            DateTime   @default(now()) @map("created_at")

  categoryId String

  category Category @relation(fields: [categoryId], references: [id])

  orderProducts OrderProduct[]

  @@map("products")
}

model Order {
  id           String      @id @default(uuid())
  status       OrderStatus @default(WAITING_FOR_PAYMENT)
  productId    String
  buyerAddress String      @map("buyer_address")
  updatedAt    DateTime?   @default(now()) @updatedAt @map("updated_at")
  createdAt    DateTime    @default(now()) @map("created_at")

  buyerId String

  user User @relation(fields: [buyerId], references: [id])

  orderProducts OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  id                 String  @id @default(uuid())
  basePrice          Decimal @map("base_price") @db.Decimal(8, 2)
  discountPercentage Int     @default(0) @map("discount_percentage")
  quantity           Int

  productId String
  orderId   String

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])

  @@map("order_products")
}

model User {
  id           String    @id @default(uuid())
  username     String
  email        String    @unique
  passwordHash String    @map("password_hash")
  updatedAt    DateTime? @default(now()) @updatedAt @map("updated_at")
  createdAt    DateTime  @default(now()) @map("created_at")

  order        Order[]
  buyerAddress BuyerAddress[]

  @@map("users")
}

model BuyerAddress {
  id           String @id @default(uuid())
  cep          Int
  city         String
  uf           String
  street       String
  neighborhood String
  houseNumber  Int    @map("house_number")
  complement   String
  phoneNumber  Int    @map("phone_number")
  username     String
  email        String

  buyerId String

  user User @relation(fields: [buyerId], references: [id])

  @@map("buyer_address")
}
