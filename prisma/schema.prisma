generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ModeOfSale {
  SELLS_ONLY_IN_THE_REGION
  ONLINE_STORE
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  PAYMENT_CONFIRMED
}

enum OrderStatusTracking {
  WAITING
  CANCELED
  PRODUCT_DELIVERED_TO_CARRIER
  PRODUCT_DELIVERED_TO_CLIENT
}

model User {
  id            String    @id @default(uuid())
  publicId      String    @unique @default(uuid()) @map("public_id")
  validationId  String    @unique @default(uuid()) @map("validation_id")
  username      String
  email         String    @unique
  passwordHash  String    @map("password_hash")
  picture       String
  emailVerified Boolean   @map("email_verified")
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  order        Order[]
  buyerAddress BuyerAddress[]
  notification Notification[]

  @@map("users")
}

model UserAddress {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  cep          Int
  city         String
  uf           String
  street       String
  neighborhood String
  houseNumber  Int       @map("house_number")
  complement   String
  phoneNumber  String    @map("phone_number")
  username     String
  email        String
  updatedAt    DateTime? @default(now()) @updatedAt @map("updated_at")
  createdAt    DateTime  @default(now()) @map("created_at")

  @@map("user_address")
}

model Category {
  id        String    @id @default(uuid())
  title     String    @unique
  slug      String
  imgUrl    String
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")
  createdAt DateTime  @default(now()) @map("created_at")

  products Product[]

  @@map("categories")
}

model Product {
  id                   String   @id @default(uuid())
  categoryTitle        String   @map("category_title")
  title                String   @unique
  slug                 String
  description          String   @db.Text
  imgUrlList           String[] @map("img_url_list")
  corsList             String[] @map("color_list")
  price                Int
  stockQuantity        Int      @map("stock_quantity")
  minimumQuantityStock Int      @map("minimum_quantity_stock")
  discountPercentage   Int      @map("discount_percentage")
  stars                Int?     @default(0)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")

  placeOfSale ModeOfSale @default(ONLINE_STORE)
  categoryId  String

  category                Category                  @relation(fields: [categoryId], references: [id])
  TechnicalProductDetails TechnicalProductDetails[]

  @@map("products")
}

model TechnicalProductDetails {
  id                     String @id @default(uuid())
  height                 String
  weight                 String
  width                  String
  brand                  String
  model                  String
  ram                    String
  rom                    String
  videoResolution        String @map("video_resolution")
  batteryCapacity        String @map("battery_capacity")
  screenOrWatchFace      String @map("screen_or_watch_face")
  averageBatteryLife     String @map("average_battery_life")
  videoCaptureResolution String @map("video_capture_resolution")
  processorBrand         String @map("processor_brand")
  operatingSystem        String @map("operating_system")

  productId String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("technical_products_details")
}

model Order {
  id           String    @id @default(uuid())
  updatedAt    DateTime? @default(now()) @updatedAt @map("updated_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  trackingCode String    @default("") @map("tracking_code")

  orderStatusTracking OrderStatusTracking @default(WAITING) @map("order_status_tracking")
  status              OrderStatus         @default(WAITING_FOR_PAYMENT)
  buyerId             String

  user User @relation(fields: [buyerId], references: [id])

  buyerAddress  BuyerAddress[]
  orderProducts OrderProduct[]

  @@map("orders")
}

model BuyerAddress {
  id           String    @id @default(uuid())
  cep          Int
  city         String
  uf           String
  street       String
  neighborhood String
  houseNumber  Int       @map("house_number")
  complement   String
  phoneNumber  String    @map("phone_number")
  username     String
  email        String
  updatedAt    DateTime? @default(now()) @updatedAt @map("updated_at")
  createdAt    DateTime  @default(now()) @map("created_at")

  buyerId String
  orderId String?

  user  User   @relation(fields: [buyerId], references: [id])
  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("buyer_address")
}

model OrderProduct {
  id                 String   @id @default(uuid())
  title              String
  imgUrl             String
  basePrice          Decimal  @map("base_price") @db.Decimal(8, 2)
  discountPercentage Int      @default(0) @map("discount_percentage")
  quantity           Int
  colorList          String[] @map("color_list")

  productId String
  orderId   String?

  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_products")
}

model Notification {
  id          String    @id @default(uuid())
  recipientId String    @map("recipient_id")
  title       String
  content     String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  recipient User @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}
